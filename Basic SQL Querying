only use single quotes for strings... not double quotes
only use '=' for equality... not '=='

SELECT [column1, column2]
FROM [table]
WHERE [condition1] AND [condition2] OR [condition3]
ORDER BY [columnX] DESC (ASC is default);

SELECT DISTINCT [column]  #  Distinct only returns unique values
FROM [table];

SELECT [column]
FROM [table]
LIMIT 5 OFFSET 5;  #  Return 5 rows starting from row 5

/*  */  #  multiline comments
IS NULL  #  the complete absence of a value
IS NOT NULL  #  must have value or default value

SELECT [column1]
FROM [table]
WHERE [column1] IN ('string1', 'string2')  #  IN is used in WHERE clause to specify list of values matched via 'OR' comparison
ORDERY BY [column1];

The percent sign (%) is a wildcard used with LIKE.  Within a search string, % means, match any number of occurrences of any character (including 0 occurrences)

SELECT [column1], [column2]
FROM [table]
WHERE [column2] LIKE 'name%';

In contrast to %, '_' matches exactly 1 character as a wildcard

SELECT Concat([column1], ' (', [column2], ')')  #  concatenating columns
FROM [table]
ORDER BY [column1];

create aliases using 'AS'

SELECT [column1] AS [column1.1]

LEFT()  Returns characters from left of string
LENGTH()  Returns the length of a string
LOWER()  Converts string to lowercase
LTRIM()  Trims white space from left of string
RIGHT()  Returns characters from right of string
RTRIM()  Trims white space from right of string
SOUNDEX()  Returns a string's SOUNDEX value
UPPER()  Converts string to uppercase

ABS()  Returns a number's absolute value
COS()  Returns the trigonometric cosine of a specified angle
EXP()  Returns the exponential value of a specific number
PI()  Returns the value of Pi
SIN()  Returns the trigonometric sine of a specific angle
SQRT()  Returns the square root of a specified number
TAN()  Returns the trigonometric tangent of a specified angle

AGGREGATE FUNCTIONS:
AVG()  Returns a column's average value  #  NULL values are ignored
COUNT()  Returns the number of rows in a column  #  NULL values are ignored if column name is specified
MAX()  Returns a column's highest value  #  NULL values are ignored
MIN()  Returns a column's lowest value  #  NULL values are ignored
SUM()  Returns the sum of a column's values  #  NULL values are ignored

SELECT [column]
FROM [table]
GROUP BY [column]
HAVING [condition];

The difference between HAVING and WHERE:
WHERE filters the data before it is grouped; HAVING filters the data after it is grouped

SUBQUERIES
Subquery SELECT statements can only retrieve a single column.

UNION / UNION ALL
SELECT [column]
FROM [table]
WHERE [condition]
UNION (ALL)  #  UNION is rbind, removing duplicates; UNION ALL is rbind, including duplicates
SELECT [column]
FROM [table]
WHERE[condition];
