SQL Cookbook:

Chapter 1:  Retrieving Records

Common operators, include: =, <, >, <=, >=, !, <>, AND, OR

Concatenating:  ‘CONCAT’
SELECT CONCAT(ename, ' WORKS AS A ', job) as msg
	FROM emp
WHERE deptno = 10;

Conditional Logic: ‘CASE WHEN’ & ‘THEN’  & ‘ELSE’ & ‘END AS’
SELECT ename, sal,
	CASE WHEN sal <= 2000 then 'UNDERPAID'
		 WHEN sal >= 4000 then 'OVERPAID'
         ELSE 'OK'
	END AS status
FROM emp;

Select X Number of Random Records:  ‘RAND()’ & ‘LIMIT’
SELECT ename, job
	FROM emp
ORDER BY RAND() LIMIT 5;

Transforming NULLs into REAL VALUES:  ‘COALESCE’
SELECT coalesce(comm, 0)
	FROM emp;

Searching for patterns: ‘IN’ & ‘LIKE’
SELECT ename, job
	FROM emp
WHERE deptno IN(10,20)
	AND (ename like '%I%' OR job like '%ER');

Chapter 2:  Sorting Query Results

Specifying the order of the output: ‘ORDER BY’ & ‘ASC’ & ‘DESC’
SELECT ename, job, sal
	FROM emp
WHERE deptno=10
ORDER BY sal DESC, ename;

Order by substring:  ‘SUBSTR’ & ‘LENGTH’
SELECT ename, job
	FROM emp
ORDER BY substr(job, length(job)-1);

Chapter 3:  Working With Multiple Tables
“A join is an operation that combines rows from two tables into one. An equi-join is one in which the join condition is based on an equality condition (e.g. where one department number equals another).  An inner join is the original type of join; each row returned contains data form another table.”

Joining Common Rows Between Tables and Creating a View:
CREATE view V
AS

SELECT EMPNO, ENAME, JOB, SAL, e.DEPTNO
	FROM EMP e, DEPT d
WHERE e.deptno = d.deptno
AND e.job = 'CLERK'

SELECT * 
	FROM V;

Which Values in  a Column are NOT IN another table: ‘NOT IN’
SELECT DISTINCT deptno
	FROM dept
WHERE deptno NOT IN (SELECT deptno FROM emp);

Retrieving Rows from One Table that do not correspond to rows in another:  ‘LEFT OUTER JOIN’
SELECT dept.*
	FROM dept LEFT OUTER JOIN emp
		ON (dept.deptno = emp.deptno)
	WHERE emp.deptno IS NULL;

Identifying and Avoiding Cartesian Products:
SELECT e.ename, d.loc
	FROM emp e, dept d
    WHERE e.deptno = d.deptno
    AND e.deptno = 10;

Chapter 4:  Inserting, Updating, Deleting

Inserting a New Record:  ‘INSERT INTO’ & ‘VALUES’
INSERT INTO DEPT (deptno, dname, loc)
	VALUES (50, 'PROGRAMMING', 'BALTIMORE');

*If you do not specify a value, then the default value will be inserted. However, you can explicitly state a ‘NULL’ value instead of allowing a default value.

Copying Rows from One Table into Another: nest a SELECT query within an INSERT INTO
INSERT INTO dept_east (deptno, dname, loc)
SELECT deptno, dname, loc
	FROM dept
WHERE loc in ('NEW YORK', 'BOSTON');

Copying a Table Definition:
CREATE TABLE dept_2 AS
SELECT *
	FROM dept
WHERE 1 = 0;   

“When using Create Table As Select (CTAS), all rows from your query will be used to populate the new table you are creating unless you specify a false condition in the WHERE clause.”

“As of the time of this writing, MySQL does not support multi-table inserts”

Modifying Records in a Table:  ‘UPDATE’ & ‘SET’

Creating a Table:
CREATE TABLE EMP_COMMISSION1 
	(DEPTNO INTEGER, 
	EMPNO INTEGER, 
	ENAME VARCHAR(10), 
	COMM INTEGER);

Deleting all Records from Table:
DELETE FROM emp_commission
WHERE deptno = 10;

Deleting Referential Integrity Violations:  ‘NOT EXISTS’
DELETE FROM emp
WHERE NOT EXISTS (
	SELECT * FROM dept
	WHERE dept.deptno = emp.deptno);

Deleting Duplicate Records:
DELETE FROM dupes
	WHERE id NOT IN
		(SELECT min(id)
		FROM (SELECT id, name from dupes) tmp
			GROUP BY name)

Chapter 5:  Metadata Queries

List Tables in a Schema:  ‘TABLE_NAME’ & ‘INFORMATION_SCHEMA.TABLES’ & TABLE_SCHEMA
SELECT table_name
	FROM information_schema.tables
	WHERE table_schema = ‘test’;

Listing a Table’s Columns:  “COLUMN_NAME’ & ‘DATA_TYPE’ & ‘ORDINAL POSITION’ & ‘TABLE_SCHEMA’

Chapter 6:  Working with Strings


Chapter 7:  Working with Numbers

Computing an Average:  ‘AVG’
SELECT deptno, avg(sal) as avg_sal
	FROM emp
GROUP BY deptno;

* The function AVG ignores NULLs

Finding the Min/Max Value in a Column:  ‘MIN’ & ‘MAX’
SELECT deptno, min(sal) as min_sal, max(sal) as max_sal
	FROM emp
GROUP BY deptno;

* The functions MIN & MAX ignore NULLs

Summing the Values in a Column:  ‘SUM’
SELECT deptno, sum(sal) as total_for_dept
	FROM EMP
GROUP BY deptno;

* The function SUM ignores NULLs

Counting Rows in a Table:  ‘COUNT(*)’
SELECT deptno, count(*)
	FROM emp
GROUP BY deptno;

* The function COUNT(*) ignores NULLs

Counting Values in a Column: ‘COUNT(col)’
SELECT COUNT(comm)
	FROM emp;
Generating a Running Total:
SELECT e.ename, e.sal,
	(SELECT SUM(d.sal) from emp d 
    WHERE d.empno <= e.empno) as running_total
FROM emp e
ORDER BY 3;

Generating a Running Product:
SELECT e.empno, e.ename, e.sal,
	(SELECT exp(sum(ln(d.sal)))
		FROM emp d
	WHERE d.empno <= e.empno
		AND e.deptno=d.deptno) as running_prod
FROM emp e
WHERE e.deptno=10;

* Use exp(sum(ln))) to multiply

Chapter 8: Date Arithmetic

Adding, Subtracting Days, Months, or Years:  INTERVAL, DAY, MONTH, YEAR
SELECT ename,
	   hiredate - interval 5 day as hd_minus_5D,
	   hiredate + interval 5 day as hd_plus_5D,
       hiredate - interval 5 month as hd_minus_5M,
       hiredate + interval 5 month as hd_plus_5M,
       hiredate - interval 5 year as hd_minus_5Y,
       hiredate + interval 5 year as hd_plus_5Y
	FROM emp
    WHERE deptno = 10;

Determining Number of Days Between Two Dates:  DATEDIFF
SELECT DATEDIFF(allen_hd, ward_hd)
	FROM
(SELECT hiredate as ward_hd
	FROM EMP
    WHERE ename = 'WARD') x,
(SELECT hiredate as allen_hd
	FROM EMP
    WHERE ename = 'ALLEN') y;

Chapter 11:  Advanced Searching

Paginating Through a Result Set:
SELECT sal
	FROM emp
    ORDER BY sal
    LIMIT 5 OFFSET 0;

Incorporating OR Logic When Using Outer Joins
SELECT e.ename, d.deptno, d.dname, d.loc
	FROM dept d left join emp e
		on d.deptno = e.deptno and (e.deptno = 10 OR e.deptno = 20)
	ORDER BY d.deptno;



