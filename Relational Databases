Relational Database Management System (RDBMS): a database management system that is based on the relational model as introduced by E.F. Codd of IBM.

Relational Model: The purpose of a relational model is to provide a declarative method for specifying data and queries: users directly state what information the database contains and what information they want from it, and let the database management system software take care of describing data structures for storing the data and retrieval procedures for answering queries.

Having data is not the problem.. So, what’s the problem??

1.	Size
2.	Ease of Updating
3.	Accuracy
4.	Security
5.	Redundancy
6.	Importance

Database Management Systems (DBMS) are much different than the actual database.  SQL Server, MySQL, DB2, etc. are DBMSs.

The Database is your data and the rules surrounding that data.  One DBMS can manage many databases.

In practice it is very common to have multiple databases within the same company.  Or, it is common to have multiple DBMS’s.

Even though there are differences between the Database Management Systems, they fall into broad categories…. All are Relational Database Management Systems.

Relational Database Features:  
•	Constructed of one or more tables.. if no tables, then no data. 
•	Each table is made for a specific purpose.. Each table has a name, columns, and rows. 
•	You must define the columns.  Each column describes one piece of data.  Gives it a name and a type (text, date, numeric, currency).  
•	Every row must follow the same format.  Rows cannot deviate from ways that the columns are set up.  

Define Table → Define Columns → Define Rows on day-to-day basis.

Primary Keys → identify one row in a table
All tables require a key → “identify one particular row in each table”  

Examples of unique columns are SSN and ISBN
If unique, then type = (numeric/text,unique)

Primary Key (PK) is generated by database → “synthetic key” or “surrogate key”
Primary Keys identify each row and each table. 

Add the Primary Key from one table to another table to describe the relationship between the tables.

**You can be a Primary Key in one table and a Foreign Key (not unique) in another table. 

“One to many relationships”  One customer has many orders. Category can have many products.

“Many-to-many relationships”  One author can have many books.  One book can have many authors.  You don’t want to repeat columns/redundancy.  Create a “linking table or junction table” to connect two disparate databases.  The “linking table” could be called Author-Book and solely have the Author ID and Book ID 

One to many = common
Many to Many = common
One to one = rare… might as well combine the tables

Transactions and the ACID test.  
For transactions to happen = either both happen or neither happen; it’s how you defined the combined unit of work.

ACID:
Atomic = indivisible unit; either all happen or neither happen
Consistent = any transaction must take database from one state to another valid state
Isolated = everything else remains constant
Durable = if transaction happens, then the transaction is guaranteed. “Robust”

These ACID capabilities are usually built into the system.  You just need to inform database that it’s a “transaction”

SELECT [column] FROM [table] WHERE [conditions]

CRUD:
Create
Read 
Update
Delete

Database schema → planning is vital; relational databases reward upfront planning.  Building a database is like getting a tattoo.  Patient, Methodical, Step-by-step.

Initial questions when designing a database:

What’s the point of the database?
•	What’s the intention of the website/application?
•	Mission statement/elevator pitch

What do you already have?
•	Forms, order sheets, printouts, handouts
•	People and expertise
•	Do you have an existing “database”

What entities do you have?
•	Customer, order, blog entry, paycheck, department
•	Plural or singular nouns → strongly preferred singular nouns; pick one and stick with it.

Entity Relationship (ER) Modeling → help figure out what tables are needed.  Boxes with lines drawn between them.

Entities become tables; Attributes become columns

Defining a Table:  Go very granular with columns 

What is the data type for each column (character, date, integer, image, binary)?
Types can be fixed length or variable length

When you add a new row, will the information be required in a row or not?  

NULL = the complete absence of a value
Not Null  = a value is required

Default value = today’s date
Pattern match = email address

Primary Key = uniquely identifies a row (required in each table); which column will be the primary key in each table?  [ISBN number, SSN, Customer ID (integer, auto-increment)]

Composite Key = when two values uniquely identify a row [Yearbook and Year together]

Creating Relationships – make sure that you are looking from both ways
1.	One-to-One
a.	Unusual [Employee → DriversLicense].. might as well combine the two tables/entities
2.	One-To-Many (most typical kind of cardinality)
a.	One Customer → Many Orders
i.	Must add more information to “many” side
1.	Foreign Key – key to a single row in a different table. The name of the Foreign Key column does not have to match, but the data type must match.
2.	The name of the Foreign Key does not have the match its Primary Key, but the data type must match
3.	Many-to-many
a.	Authors → Books; Classes → Students; cannot represent a many-to-many relationships directly
b.	Must create a linking/junction/joining table → use foreign keys of each separate table
i.	What is the primary key of the linking table? 
1.	Perhaps use a composite key in linking tables… make every row unique.

Referential constraint = a rule that applies between tables; a constraint to maintain integrity of the database.  It would allow a customer without an order, but it won’t allow an order without a customer.

Referential Integrity = Can’t add an order row with a customer ID that doesn’t exist; enforcing the rules of the relationship. 

Cascading Delete = delete row from customer table and immediately delete any related rows… it will cascade down and delete all order rows from that customer.  

Cascading Nullify = (rare); Delete customerID, the null the customer ID FK in the order table.  

No Action = default in most DBMS; delete a customer that has existing orders; it will refuse the action… must delete all orders first

Database Normalization = take database design and apply formal criteria (rules)

“Everybody does Normalization”  Core Competency of the job 

First Normal Form (1NF):
•	“Each of your tables and columns should contain one value and only one value for each.”  It would be hard to search and sort if your columns contained variable amounts of values.  Do not create repeating groups as columns either.

•	Take data out of employee table and put it in another table to create a “one-to-Many” table.  

Second Normal Form (2NF)
•	You must be in 1NF to enter 2NF:

•	Relationship between columns that are Keys and other columns that aren’t keys.

•	“Any non-key field should be dependent on the entire primary key.”  Only a composite primary key.  

•	Extract course table to create a one to many relationship between events and course.  

•	If you aren’t using composite keys, then 2NF isn’t a concern


Third Normal Form (3NF)
•	“No non-key field is dependent on any other non-key field”

•	If so, then extract the data into another table and create a one-to-many relationship.

•	Create lots of tables instead of one big table.  Normalization is all about the redundancy of the information

•	Normalization should be carried out for every database 

De-Normalization:
•	Some tables intentionally break normalization rules.  “De-normalization decision” making a conscious effort to break Normalization laws.

•	Normalization is concerned about the quality and reducing redundancy.  De-Normalization is for performance improvement. 

•	You really want to understand the data before making the decision about normalizing and de-normalizing


Date Manipulation Language (DML)
SELECT
INSERT 
UPDATE
DELETE

Data Definition Language
CREATE
ALTER 
DROP

Data Control Keywords
Grant
Revoke

Creating Indexes:
Help you find things in your database; All about speed of access

Clustered Index:  Pick a column and then the rest of the data will be sorted that way.  Most common clustered index in databases is the primary key column.  Most tables will have PK as the clustered index.  Each table can only have one Clustered Index.  

Full Table Scans are inefficient.  

Non-clustered index on LastName… it’s a separate map of the data that’s ordered by something other than the clustered index.

Why don’t we add a non-clustered index to every column.  Every index has a cost.  Indexes need to be maintained.  Indexes are a benefit when reading data, but they are costly to maintain. 

Only put indexes on the columns that you really need and use all of the time.  

•	Indexing is not just “up-front” work
•	Indexing is a trade-off
o	Faster reads, slower writes
•	But it can be tweaked without breaking applications

BEGIN/START TRANSACTION/WORK
COMMIT

“dirty read” there is a transaction going on that is in the middle and we’re allowed to read from it. 

Pessimistic Locking = we are pessimistic that transactions are in conflict of each other.  Once the first transaction begins, the second transaction must wait until it’s over.

If you always do pessimistic locking, you may end up with a lot of read errors.  There are a lot of situations when transactions are not competing

Optimistic Locking = Bob will be allowed to read from the table during transaction, but not update because it’ll be a dirty read.

Figure out what the default locking is

Stored Procedures:  sometimes called an S-Proc; It’s a chunk of SQL that can be written, given a name, and stored directly.. kind of like a method or function

Stored Procedures

CREATE PROCEDURE HighlyPaid()
SELECT * FROM Employee
WHERE Salary > 50000
ORDER BY LastName, FirstName
END;

CALL HighlyPaid();

Stored procedures can have parameters
CREATE PROCEDURE EmployeesInDept (IN dept VARCHAR(50))
SELECT * FROM Employee
WHERE Department = dept
ORDER BY LastName, FirstName
END;

Call EmployeesInDept(‘Accounting’);

Relational Database Management Systems (RDBMS):
Tables w/ Defined columns
PK and FK
Relations, Transactions, ACID Test
Use SQL to talk with them

Object Relational Mapping (ORM) allows us to connect an object oriented language to a normal relational database system

NoSQL Database Systems:
“Not only SQL”

Document Stores
•	Documents, not rows and columns
Key-value Stores
•	Everything stored as a key-value pair
Graph database
•	Everything stored as small connected nodes, with relations

Reasons to choose a NoSQL database
•	Do you need a flexible schema?
•	Do you have vast amounts of data?
•	Do you value scaling over consistency?

